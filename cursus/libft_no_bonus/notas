https://www.equestionanswers.com/c/memcpy-vs-memmove.php
MEMCPY
	el problema viene cuando intentas copiar un trozo de una str en sí misma
	overlaping:
		src = str[3]
		dest = str[5]
		len = 5
		las posiciones 3 y 4 se copian adecuadamente.
		PERO la posición 5 de str ha sido ya modificada, por lo que al ir a
		copiarla, nos encontramos con el contenido de str[3], porque la hemos
		modificado.
		MEMMOVE evita esto precisamente.
		¿cómo? Fácil: comparando la posición de los punteros.
		- Si SRC > DEST, quiere decir que está en una posición más avanzada
			por lo que funciona igual que MEMCPY
		- Si SRC < DEST, quiere decir que DEST está en una posición más avanzada
			y, por lo tanto, debemos copiar de atrás adelante.
			es decir: i = LEN - 1; i--;

	DUDA:
		¿cómo se comporta la función original cuando LEN supera el tamaño de dest?
			¿y cuando supera el tamaño de src?

--------------------------------------------------------------------------------
cambiar todos los unsigned int por size_t

--------------------------------------------------------------------------------
ESTUDIAR
* include guard (https://en.wikipedia.org/wiki/Include_guard)

* https://docs.microsoft.com/es-es/cpp/cpp/void-cpp?view=msvc-170
	sobre las funciones void*.
	Básicamente, pueden apuntar a cualquier variable que no haya sido declarada
	con "const" o "volatile".
	Puede convertirse en cuaquier otro tipo de puntero (char*, int*...).
--------------------------------------------------------------------------------
							GNU MAKE
		https://www.gnu.org/software/make/manual/make.html
--------------------------------------------------------------------------------

******************************
regreso de freeze
***********************
makigas.es para aprender de estrucutars de C

***********TESTERS***********
paco --strict
	substr
	split

Tripouille
	calloc