https://www.equestionanswers.com/c/memcpy-vs-memmove.php
MEMCPY
	el problema viene cuando intentas copiar un trozo de una str en sí misma
	overlaping:
		src = str[3]
		dest = str[5]
		len = 5
		las posiciones 3 y 4 se copian adecuadamente.
		PERO la posición 5 de str ha sido ya modificada, por lo que al ir a
		copiarla, nos encontramos con el contenido de str[3], porque la hemos
		modificado.
		MEMMOVE evita esto precisamente.
		¿cómo? Fácil: comparando la posición de los punteros.
		- Si SRC > DEST, quiere decir que está en una posición más avanzada
			por lo que funciona igual que MEMCPY
		- Si SRC < DEST, quiere decir que DEST está en una posición más avanzada
			y, por lo tanto, debemos copiar de atrás adelante.
			es decir: i = LEN - 1; i--;

	DUDA:
		¿cómo se comporta la función original cuando LEN supera el tamaño de dest?
			¿y cuando supera el tamaño de src?

--------------------------------------------------------------------------------
cambiar todos los unsigned int por size_t

--------------------------------------------------------------------------------
ESTUDIAR
* include guard (https://en.wikipedia.org/wiki/Include_guard)

* https://docs.microsoft.com/es-es/cpp/cpp/void-cpp?view=msvc-170
	sobre las funciones void*.
	Básicamente, pueden apuntar a cualquier variable que no haya sido declarada
	con "const" o "volatile".
	Puede convertirse en cuaquier otro tipo de puntero (char*, int*...).
--------------------------------------------------------------------------------
							GNU MAKE
		https://www.gnu.org/software/make/manual/make.html
--------------------------------------------------------------------------------

******************************
regreso de freeze
***********************
makigas.es para aprender de estrucutars de C

makefile makigas (makefiles disintos: lcelanova, ezy0)
NAME = libft.a

CC = gcc
CFLAGS = -Werror -Wall -Wextra
AR = ar rcs
RM = rm -rf

SRC = ft_atoi.c\
			ft_strncmp.c ft_isalpha.c ft_isdigit.c ft_isalnum.c\
			ft_isascii.c ft_isprint.c ft_strlen.c ft_memset.c\
			ft_bzero.c ft_memcpy.c ft_memmove.c ft_strlcpy.c\
			ft_strlcat.c ft_toupper.c ft_tolower.c ft_strchr.c\
			ft_strrchr.c ft_memchr.c ft_memcmp.c ft_strnstr.c\
			ft_calloc.c ft_strdup.c ft_substr.c ft_strjoin.c\
			ft_strtrim.c ft_split.c ft_itoa.c ft_strmapi.c\
			ft_striteri.c ft_putchar_fd.c ft_putstr_fd.c ft_putendl_fd.c\
			ft_putnbr_fd.c\

BONUS = ft_lstnew_bonus.c\
			ft_lsddelone_bonus.c\
			ft_lstadd_back_bonus.c\
			ft_lstadd_front_bonus.c\
			ft_lstclear_bonus.c\
			ft_lstiter_bonus.c\
			ft_lstlast_bonus.c\
			ft_lstmap_bonus.c\
			ft_lstsize_bonus.c\

OBJS = $(SRC:.c=.o)

OBJS_BONUS = $(SRC_B:.c=.o)



all: $(NAME)

$(NAME): $(OBJS)
	@ar crs $(NAME) $(OBJS)

clean:
	@$(RM) $(OBJS) $(OBJS_BONUS)

fclean: clean
	@$(RM) $(NAME)

re: clean all

bonus:
		@make SRC='$(SRC) $(BONUS)'

re: fclean bonus

rebonus: fclean bonus

.PHONY: all re clean fclean bonus